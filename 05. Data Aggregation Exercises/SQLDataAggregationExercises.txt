TASK 1

SELECT COUNT(Id) AS [Count] FROM WizzardDeposits

TASK 2

SELECT MAX(MagicWandSize) FROM WizzardDeposits

TASK 3

SELECT DepositGroup, MAX(MagicWandSize) AS LongestMagicWand FROM WizzardDeposits
GROUP BY DepositGroup

-----
TASK 4

SELECT TOP 1 WITH TIES DepositGroup FROM WizzardDeposits
GROUP BY DepositGroup
ORDER BY AVG(MagicWandSize)

TASK 5

SELECT DepositGroup, SUM(DepositAmount) AS TotalSum FROM WizzardDeposits
GROUP BY DepositGroup

TASK 6

SELECT DepositGroup, SUM(DepositAmount) AS TotalSum FROM WizzardDeposits
WHERE MagicWandCreator = 'Ollivander family ' 
GROUP BY DepositGroup

TASK 7

SELECT DepositGroup, SUM(DepositAmount) AS TotalSum FROM WizzardDeposits
WHERE MagicWandCreator = 'Ollivander family'
GROUP BY DepositGroup
HAVING SUM(DepositAmount) < 150000
ORDER BY SUM(DepositAmount) DESC

TASK 8

SELECT DepositGroup, MagicWandCreator, MIN(DepositCharge) AS MinDepositCharge 
FROM WizzardDeposits
GROUP BY DepositGroup, MagicWandCreator
ORDER BY MagicWandCreator, DepositGroup

TASK 9

SELECT 
CASE
	WHEN Age BETWEEN 0 AND 10 THEN '[0-10]'
	WHEN Age BETWEEN 11 AND 20 THEN '[11-20]'
	WHEN Age BETWEEN 21 AND 30 THEN '[21-30]'
	WHEN Age BETWEEN 31 AND 40 THEN '[31-40]'
	WHEN Age BETWEEN 41 AND 50 THEN '[41-50]'
	WHEN Age BETWEEN 51 AND 60 THEN '[51-60]'
	WHEN Age >= 61 THEN '[61+]'
END AS [AgeGroup],
COUNT(*) AS WizardCount

FROM WizzardDeposits
GROUP BY 
CASE
	WHEN Age BETWEEN 0 AND 10 THEN '[0-10]'
	WHEN Age BETWEEN 11 AND 20 THEN '[11-20]'
	WHEN Age BETWEEN 21 AND 30 THEN '[21-30]'
	WHEN Age BETWEEN 31 AND 40 THEN '[31-40]'
	WHEN Age BETWEEN 41 AND 50 THEN '[41-50]'
	WHEN Age BETWEEN 51 AND 60 THEN '[51-60]'
	WHEN Age >= 61 THEN '[61+]'
END

TASK 10

SELECT LEFT(FirstName, 1) FROM WizzardDeposits
WHERE DepositGroup = 'Troll Chest'
GROUP BY LEFT(FirstName, 1)
ORDER BY LEFT(FirstName, 1)

TASK 11

SELECT DepositGroup, IsDepositExpired, AVG(DepositInterest) AS [AverageInterest]
FROM WizzardDeposits
WHERE DepositStartDate > '01/01/1985'
GROUP BY DepositGroup, IsDepositExpired
ORDER BY DepositGroup DESC, IsDepositExpired

TASK 12

DECLARE @currentDeposit DECIMAL(8,2)
DECLARE @previousDeposit DECIMAL(8,2)
DECLARE @totalSum DECIMAL(8,2) = 0

DECLARE wizardCursor CURSOR FOR SELECT DepositAmount FROM WizzardDeposits
OPEN wizardCursor
FETCH NEXT FROM wizardCursor INTO @currentDeposit

WHILE (@@FETCH_STATUS = 0)
BEGIN
	IF(@previousDeposit IS NOT NULL)
	BEGIN
		SET @totalSum += (@previousDeposit - @currentDeposit)
	END

	SET @previousDeposit = @currentDeposit
	FETCH NEXT FROM wizardCursor INTO @currentDeposit
END
CLOSE wizardCursor 
DEALLOCATE wizardCursor 

SELECT @totalSum AS SumDifference

TASK 13

SELECT DepartmentId, SUM(Salary) FROM Employees
GROUP BY DepartmentId
ORDER BY DepartmentId

TASK 14

SELECT DepartmentId, MIN(Salary) AS [MinimumSalary] FROM Employees
WHERE 
(DepartmentId = 2 OR DepartmentId = 5 OR DepartmentId = 7) AND
(HireDate > YEAR(01/01/2000))

GROUP BY DepartmentId

--- SECOND WITH LESS CODE

SELECT DepartmentId, MIN(Salary) AS [MinimumSalary] FROM Employees
WHERE DepartmentId = 2 OR DepartmentId = 5 OR DepartmentId = 7
GROUP BY DepartmentId

TASK 15

SELECT * INTO EmployeesTable FROM Employees
WHERE Salary > 30000

DELETE FROM EmployeesTable
WHERE ManagerId = 42

UPDATE EmployeesTable
SET Salary += 5000
WHERE DepartmentId = 1

SELECT DepartmentId, AVG(Salary) AS [AverageSalary] FROM EmployeesTable
GROUP BY DepartmentId

TASK 16

SELECT DepartmentId, MAX(Salary) AS [MaxSalary] FROM Employees
GROUP BY DepartmentId
HAVING MAX(Salary) NOT BETWEEN 30000 AND 70000

TASK 17

SELECT COUNT(Salary) AS [Count] FROM Employees
WHERE ManagerID IS NULL

TASK 18

SELECT DepartmentID, Salaries.Salary FROM
(
SELECT 
	DepartmentID, 
	MAX(Salary) AS Salary,
	DENSE_RANK() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS Rank
FROM Employees
GROUP BY DepartmentID, Salary
) AS Salaries
WHERE Rank = 3

TASK 19

SELECT TOP 10 FirstName, LastName, DepartmentId FROM Employees AS e
WHERE Salary > 
(
	SELECT AVG(Salary) FROM Employees AS emp
	WHERE e.DepartmentID = emp.DepartmentID
	GROUP BY DepartmentID
)
ORDER BY DepartmentId